# GitHub Actions workflow for CI/CD pipeline
# This workflow builds, tests, and deploys the application to AWS EC2

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  PROJECT_NAME: 'my-react-app'

jobs:
  # Job 1: Run tests and build the application
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          package.json
          package-lock.json
          ecosystem.config.js
        retention-days: 30

  # Job 2: Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to staging server
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.STAGING_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        # Create SSH key file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create deployment package
        tar -czf deployment.tar.gz dist/ package.json package-lock.json ecosystem.config.js
        
        # Copy files to server
        scp -i private_key.pem -o StrictHostKeyChecking=no \
          deployment.tar.gz $USER@$HOST:/tmp/
          
        # Deploy on server
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          set -e
          
          # Extract deployment package
          cd /opt/${{ env.PROJECT_NAME }}
          sudo tar -xzf /tmp/deployment.tar.gz
          sudo chown -R appuser:appuser .
          
          # Run deployment script
          sudo -u appuser ./deploy.sh
          
          # Verify deployment
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          
          echo "Staging deployment completed successfully"
        EOF
        
        # Cleanup
        rm -f private_key.pem

  # Job 3: Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create deployment backup
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create backup of current deployment
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          sudo -u appuser mkdir -p /opt/${{ env.PROJECT_NAME }}/backups
          sudo -u appuser tar -czf /opt/${{ env.PROJECT_NAME }}/backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz \
            -C /opt/${{ env.PROJECT_NAME }} \
            --exclude=backups \
            --exclude=node_modules \
            --exclude=logs \
            .
        EOF
        
    - name: Deploy to production server
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        # Create deployment package
        tar -czf deployment.tar.gz dist/ package.json package-lock.json ecosystem.config.js
        
        # Copy files to server
        scp -i private_key.pem -o StrictHostKeyChecking=no \
          deployment.tar.gz $USER@$HOST:/tmp/
          
        # Deploy on server with rollback capability
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          set -e
          
          # Extract deployment package
          cd /opt/${{ env.PROJECT_NAME }}
          sudo tar -xzf /tmp/deployment.tar.gz
          sudo chown -R appuser:appuser .
          
          # Run deployment script
          if ! sudo -u appuser ./deploy.sh; then
            echo "Deployment failed, rolling back..."
            # Implement rollback logic here if needed
            exit 1
          fi
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f http://localhost:3000/health; then
              echo "Health check passed"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          done
          
          echo "Production deployment completed successfully"
        EOF
        
        # Cleanup
        rm -f private_key.pem
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        # Add notification logic here (Slack, email, etc.)

  # Job 4: Infrastructure validation (optional)
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: terraform
      run: terraform init
      
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
      
    - name: Terraform Plan
      working-directory: terraform
      run: |
        terraform plan \
          -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -no-color
